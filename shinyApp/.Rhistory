1+1
install.packages("dplyr")
#list of libraries
library(readr)
library(GoodmanKruskal)
#import data
SAdataset_2016 <- read.csv("~/Documents/Development/dsfsi-thuto-slim/data/matric/SAdataset_2016.csv")
colnames(SAdataset_2016)
#characters
carSet <- c("RateWater","RateHospital","ToiletLocation","SafetyInDark","Hhgoods_radio","Quintile",
"RateElectricity","WaterAccess","MainDwellType","ElectrInterrupt","HeadHH_Sex",
"MunicDiff","HHgoods_dvd","RateToilet","Toilet","SafetyInDay","EnergyLight",
"HHgoods_tv","Internet_cellphone","category")
charFrame <- subset(SAdataset_2016, select = carSet)
GKmatrix2 <- GKtauDataframe(as.data.frame(charFrame), includeNA = "ifany")
plot(GKmatrix2)
results <- aov(student_teacher_ratio ~ category, data = SAdataset_2016)
summary(results)
library(ggplot2)
theme_set(theme_classic())
library(dplyr)
outliers <- boxplot(SAdataset_2016$student_teacher_ratio, plot=FALSE)$out
SAdataset_2016 <- SAdataset_2016[-which(SAdataset_2016$Student.Teacher.ratio %in% outliers),]
outliers <- boxplot(SAdataset_2016$student_teacher_ratio, plot=FALSE)$out
SAdataset_2016 <- SAdataset_2016[-which(SAdataset_2016$student_teacher_ratio %in% outliers),]
#**************************Student-teacher ratio figure *************************************
cdat <- SAdataset_2016 %>%
group_by(school) %>%
summarise(rating.mean = mean(student_teacher_ratio),
sem = sd(student_teacher_ratio)/sqrt(length(student_teacher_ratio)),
ci.low = mean(student_teacher_ratio) - 2*sem,
ci.upp = mean(student_teacher_ratio) + 2*sem)
View(SAdataset_2016)
#**************************Student-teacher ratio figure *************************************
cdat <- SAdataset_2016 %>%
group_by(category) %>%
summarise(rating.mean = mean(student_teacher_ratio),
sem = sd(student_teacher_ratio)/sqrt(length(student_teacher_ratio)),
ci.low = mean(student_teacher_ratio) - 2*sem,
ci.upp = mean(student_teacher_ratio) + 2*sem)
cdat.dens <- ggplot_build(ggplot(SAdataset_2016, aes(x=student_teacher_ratio, colour=category)) + geom_density())$data[[1]]%>%
mutate(category = ifelse(group == 1, "high-performing category", "low-performing category")) %>%
left_join(cdat) %>%
select(y, x, category, rating.mean, sem, ci.low, ci.upp) %>%
group_by(category) %>%
mutate(dens.mean = approx(x, y, xout = rating.mean)[[2]],
dens.cilow = approx(x, y, xout = ci.low)[[2]],
dens.ciupp = approx(x, y, xout = ci.upp)[[2]]) %>%
select(-y, -x) %>%
slice(1)
cdat.dens <- ggplot_build(ggplot(SAdataset_2016, aes(x=student_teacher_ratio, colour=category)) + geom_density())$data[[1]]%>%
mutate(category = ifelse(group == "1", "high-performing category", "low-performing category")) %>%
left_join(cdat) %>%
select(y, x, category, rating.mean, sem, ci.low, ci.upp) %>%
group_by(category) %>%
mutate(dens.mean = approx(x, y, xout = rating.mean)[[2]],
dens.cilow = approx(x, y, xout = ci.low)[[2]],
dens.ciupp = approx(x, y, xout = ci.upp)[[2]]) %>%
select(-y, -x) %>%
slice(1)
View(SAdataset_2016)
#import data
SAdataset_2016 <- read.csv("~/Documents/Development/dsfsi-thuto-slim/data/matric/SAdataset_2016.csv")
outliers <- boxplot(SAdataset_2016$student_teacher_ratio, plot=FALSE)$out
SAdataset_2016 <- SAdataset_2016[-which(SAdataset_2016$student_teacher_ratio %in% outliers),]
#**************************Student-teacher ratio figure *************************************
cdat <- SAdataset_2016 %>%
group_by(category) %>%
summarise(rating.mean = mean(student_teacher_ratio),
sem = sd(student_teacher_ratio)/sqrt(length(student_teacher_ratio)),
ci.low = mean(student_teacher_ratio) - 2*sem,
ci.upp = mean(student_teacher_ratio) + 2*sem)
cdat.dens <- ggplot_build(ggplot(SAdataset_2016, aes(x=student_teacher_ratio, colour=category)) + geom_density())$data[[1]]%>%
mutate(category = ifelse(group == 1, "high-performing category", "low-performing category")) %>%
left_join(cdat) %>%
select(y, x, category, rating.mean, sem, ci.low, ci.upp) %>%
group_by(category) %>%
mutate(dens.mean = approx(x, y, xout = rating.mean)[[2]],
dens.cilow = approx(x, y, xout = ci.low)[[2]],
dens.ciupp = approx(x, y, xout = ci.upp)[[2]]) %>%
select(-y, -x) %>%
slice(1)
s
cdat.dens <- ggplot_build(ggplot(SAdataset_2016, aes(x=student_teacher_ratio, colour=category)) + geom_density())$data[[1]]%>%
mutate(category = ifelse(group == "1", "high-performing category", "low-performing category")) %>%
left_join(cdat) %>%
select(y, x, category, rating.mean, sem, ci.low, ci.upp) %>%
group_by(category) %>%
mutate(dens.mean = approx(x, y, xout = rating.mean)[[2]],
dens.cilow = approx(x, y, xout = ci.low)[[2]],
dens.ciupp = approx(x, y, xout = ci.upp)[[2]]) %>%
select(-y, -x) %>%
slice(1)
ggplot() +
geom_density(data = SAdataset_2016, aes(x = student_teacher_ratio, colour = category),alpha=0.8,size = 1) +
geom_segment(data = cdat.dens, aes(x = rating.mean, xend = rating.mean, y = 0, yend = dens.mean, colour = category),
linetype = "dashed", size = 1) +
geom_segment(data = cdat.dens, aes(x = ci.low, xend = ci.low, y = 0, yend = dens.cilow, colour = category),
linetype = "dotted", size = 1) +
geom_segment(data = cdat.dens, aes(x = ci.upp, xend = ci.upp, y = 0, yend = dens.ciupp, colour = category),
linetype = "dotted", size = 1)+
theme(plot.title = element_text(size = 17))+
labs(title="Distribution of student-teacher ratios in categorys",
subtitle="",
caption="") + theme_grey(base_size = 19)
summary(SAdataset_2016)
cdat.dens <- ggplot_build(ggplot(SAdataset_2016, aes(x=student_teacher_ratio, colour=category)) + geom_density())$data[[1]]%>%
mutate(category = ifelse(group == "1", "high-performing category", "low-performing category")) %>%
left_join(cdat) %>%
select(y, x, category, rating.mean, sem, ci.low, ci.upp) %>%
group_by(category) %>%
mutate(dens.mean = approx(x, y, xout = rating.mean)[[2]],
dens.cilow = approx(x, y, xout = ci.low)[[2]],
dens.ciupp = approx(x, y, xout = ci.upp)[[2]]) %>%
select(-y, -x) %>%
slice(1)
shiny::runApp('Documents/Development/AWIGEN-1-Post-QC/shinyApp')
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Documents/Development/AWIGEN-1-Post-QC/shinyApp")
install.packages("hash")
library(hash)
# refer to the codebook labels
measurements_hash <- hash()
shiny::runApp()
shiny::runApp()
# refer to the codebook labels
measurements_hash <- hash()
measurements_hash[["tested_hiv_qc"]] = list("1" = "Yes", "0" = "No", "2" = "Don't know",
"3" = "Refuse to answer", "-999" = "Missing")
keys(measurements_hash)
runApp()
values(measurements_hash)
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
