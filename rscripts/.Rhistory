#top schools
#get the quatiles of papers passed variable
summary(SLdataset_2018$Papers_Passed)
get_category_dist(SLdataset_2018, cols, 'outcome')
print(gkgamma(tt))
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
get_category_dist(SLdataset_2018, cols, 'outcome')
# list of categorical variables
cols <- c("remoteness","school_owner","financial_support","mixed_school","boarding","dev_plan","drink_water",
"latrine_condition","drink_water_source","library","canteen","elec_grid","idregion","approval_status",
"shift_status","fence","garden","internet","avail_latrine_fac","private_cubicle","sci_lab",
"rec_facilities","generator","basic_comp_skills","feeder_school")
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
#get a list of categorical columns to consider in the analysis
colnames(SLdataset_2018)
# testing for significance of numeric variables
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
# testing for significance of numeric variables
nums <- c("disability","sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
get_numeric_significance(SLdataset_2018, nums, 'outcome')
#import SL data
#for my pc
SLdataset_2018 <- read.csv("~/Development/dsfsi-thuto-slim/data/wassce/SLdataset_2018.csv", header=TRUE)
# creating classes
SLdataset_2018$outcome <- ifelse(SLdataset_2018$Papers_Passed < 50,
c("fail"), c("pass"))
# testing for significance of numeric variables
nums <- c("disability","sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
# testing for significance of numeric variables
nums <- c("sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
View(SLdataset_2018)
# testing for significance of numeric variables
nums <- c("sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
fit <- aov(cl ~ sch_outcome, data=df)
print(fit)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
kruskal.test(sum_latrine ~ outcome, data = SLdataset_2018)
kruskal.test(sum_latrine ~ outcome, data = SLdataset_2018)
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
fit <- aov(cl ~ sch_outcome, data=df)
print(fit)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
aov(cl ~ sch_outcome, data=df)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
aov(cl ~ sch_outcome, data=df)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
kruskal.test(disability ~ outcome, data = SLdataset_2018)
kruskal.test(disability ~ outcome, data = SLdataset_2018)
kruskal.test(chalk_board_good ~ outcome, data = SLdataset_2018)
kruskal.test(full_time_teachers ~ outcome, data = SLdataset_2018)
kruskal.test(teacher_BEduc ~ outcome, data = SLdataset_2018)
kruskal.test(teacher_PostGradEduc ~ outcome, data = SLdataset_2018)
kruskal.test(learning_materials ~ outcome, data = SLdataset_2018)
kruskal.test(computers ~ outcome, data = SLdataset_2018)
kruskal.test(computers ~ outcome, data = SLdataset_2018)
kruskal.test(sum_enrol ~ outcome, data = SLdataset_2018)
kruskal.test(counsellors~ outcome, data = SLdataset_2018)
kruskal.test(counsellors~ outcome, data = SLdataset_2018)
kruskal.test(teachers~ outcome, data = SLdataset_2018)
kruskal.test(teacher_AnyBachelor~ outcome, data = SLdataset_2018)
kruskal.test(teacher_HTC_S~ outcome, data = SLdataset_2018)
kruskal.test(avg_teacher_service_years~ outcome, data = SLdataset_2018)
kruskal.test(student_teacher_ratio~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Government~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Government~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Private institution~ outcome, data = SLdataset_2018)
kruskal.test('teacher_salary_Private institution'~ outcome, data = SLdataset_2018)
# list of categorical variables
cols <- c("remoteness","school_owner","financial_support","mixed_school","boarding","dev_plan","drink_water",
"latrine_condition","drink_water_source","library","canteen","elec_grid","idregion","approval_status",
"shift_status","fence","garden","internet","avail_latrine_fac","private_cubicle","sci_lab",
"rec_facilities","generator","basic_comp_skills","feeder_school")
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
install.packages("shinydashboard")
shinyUI(
dashboardPage(
# header
dashboardHeader(title = "AWI-Gen 1 QC"),
# side bar
dashboardSidebar(
# data
box(title = "Data", status = "primary", solidHeader = T),
# Instruments
box(title = "Instruments", status = "primary", solidHeader = T),
sidebarMenu(
# menu items
menuItem("Demography"),
menuItem("Demography"),
menuItem("Demography"),
menuItem("Demography"),
menuItem("Demography"),
menuItem("Demography"),
menuItem("Demography"),
menuItem("Demography"),
)
),
# body
dashboardBody()
)
)
shiny::runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
shiny::runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp()
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
shiny::runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
library(ggplot2)
library(plyr)
library(readxl)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
awigen$site_names <- site_labels[awigen$site]
# filtering out rows per site
agincourt <- awigen[ which(awigen$site == 1),]
digkale <- awigen[ which(awigen$site == 2),]
nairobi <- awigen[ which(awigen$site == 3),]
nanoro <- awigen[ which(awigen$site == 4),]
navrongo <- awigen[ which(awigen$site == 5),]
soweto <- awigen[ which(awigen$site == 6),]
measurememts <- c("standing_height_qc",
"weight_qc",
"waist_circumference_qc",
"hip_circumference_qc",
"bp_sys_average_qc",
"bp_dia_average_qc",
"pulse_average_qc",
"visceral_fat_qc",
"subcutaneous_fat_qc",
"min_cimt_right",
"max_cimt_right",
"mean_cimt_right",
"mean_cimt_right_qc",
"min_cimt_left",
"max_cimt_left",
"mean_cimt_left",
"mean_cimt_left_qc",
"fasting_confirmation_qc",
"glucose_qc",
"s_creatinine_qc",
"insulin_qc",
"hdl_qc",
"ldl_qc",
"cholesterol_1_qc",
"triglycerides_qc",
"ur_creatinine_qc",
"ur_albumin_qc",
"ur_protein_qc")
hiv_cols <- c("tested_hiv_qc",
"hiv_status_qc",
"hiv_positive_qc",
"hiv_medication_qc",
"traditional_med_hiv_qc",
"agree_hivtest",
"result_hiv_qc")
# create age groups
agincourt$age_group <- cut(agincourt$age,
breaks=c(40, 61, 71, max(agincourt$age)),
right = FALSE,
labels = c("40-60","61-70","71 plus"))
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
hiv_cat_freq(nairobi, hiv_cols)
library(ggplot2)
library(plyr)
library(readxl)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
library(plyr)
library(ggplot2)
library(plyr)
library(readxl)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
library(ggplot2)
library(plyr)
library(readxl)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.24.csv", header=TRUE)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
awigen$site_names <- site_labels[awigen$site]
# filtering out rows per site
agincourt <- awigen[ which(awigen$site == 1),]
digkale <- awigen[ which(awigen$site == 2),]
nairobi <- awigen[ which(awigen$site == 3),]
nanoro <- awigen[ which(awigen$site == 4),]
navrongo <- awigen[ which(awigen$site == 5),]
soweto <- awigen[ which(awigen$site == 6),]
measurememts <- c("standing_height_qc",
"weight_qc",
"waist_circumference_qc",
"hip_circumference_qc",
"bp_sys_average_qc",
"bp_dia_average_qc",
"pulse_average_qc",
"visceral_fat_qc",
"subcutaneous_fat_qc",
"min_cimt_right",
"max_cimt_right",
"mean_cimt_right",
"mean_cimt_right_qc",
"min_cimt_left",
"max_cimt_left",
"mean_cimt_left",
"mean_cimt_left_qc",
"fasting_confirmation_qc",
"glucose_qc",
"s_creatinine_qc",
"insulin_qc",
"hdl_qc",
"ldl_qc",
"cholesterol_1_qc",
"triglycerides_qc",
"ur_creatinine_qc",
"ur_albumin_qc",
"ur_protein_qc")
hiv_cols <- c("tested_hiv_qc",
"hiv_status_qc",
"hiv_positive_qc",
"hiv_medication_qc",
"traditional_med_hiv_qc",
"agree_hivtest",
"result_hiv_qc")
# create age groups
agincourt$age_group <- cut(agincourt$age,
breaks=c(40, 61, 71, max(agincourt$age)),
right = FALSE,
labels = c("40-60","61-70","71 plus"))
# categorizing soweto data
soweto_sweet <- soweto[ which(soweto$cohort_id_c == "SWEET"),]
soweto_bara <- soweto[ which(soweto$cohort_id_c == "BARA"),]
soweto_men<- soweto[ which(soweto$cohort_id_c == ""),]
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
hiv_cat_freq(nairobi, hiv_cols)
# comparing two categorical columns
table(nairobi$agree_hivtest_qc, nairobi$tested_hiv_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$tested_hiv_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$hiv_positive_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$hiv_status_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$hiv_positive_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$hiv_medication_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$hiv_medication_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$traditional_med_qc)
# comparing two categorical columns
table(nairobi$agree_hivtest_qc, nairobi$hiv_positive_qc)
# comparing two categorical columns
table(nairobi$agree_hivtest_qc, nairobi$result_hiv_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$result_hiv_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$agree_hivtest_qc)
hiv_cat_freq(nairobi, hiv_cols)
# comparing two categorical columns
table(nairobi$agree_hivtest_qc, nairobi$agree_hivtest_qc)
# comparing two categorical columns
table(nairobi$agree_hivtest_qc, nairobi$result_hiv_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$result_hiv_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$result_hiv_qc)
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp()
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
runApp('Development/AWIGEN-1-Post-QC/shinyApp')
setwd("~/Development/AWIGEN-1-Post-QC/rscripts")
runApp('~/Development/AWIGEN-1-Post-QC/shinyApp')
install.packages("randomcoloR")
runApp('~/Development/AWIGEN-1-Post-QC/shinyApp')
library(ggplot2)
library(plyr)
library(readxl)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.24.csv", header=TRUE)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
awigen$site_names <- site_labels[awigen$site]
# filtering out rows per site
agincourt <- awigen[ which(awigen$site == 1),]
digkale <- awigen[ which(awigen$site == 2),]
nairobi <- awigen[ which(awigen$site == 3),]
nanoro <- awigen[ which(awigen$site == 4),]
navrongo <- awigen[ which(awigen$site == 5),]
soweto <- awigen[ which(awigen$site == 6),]
measurememts <- c("standing_height_qc",
"weight_qc",
"waist_circumference_qc",
"hip_circumference_qc",
"bp_sys_average_qc",
"bp_dia_average_qc",
"pulse_average_qc",
"visceral_fat_qc",
"subcutaneous_fat_qc",
"min_cimt_right",
"max_cimt_right",
"mean_cimt_right",
"mean_cimt_right_qc",
"min_cimt_left",
"max_cimt_left",
"mean_cimt_left",
"mean_cimt_left_qc",
"fasting_confirmation_qc",
"glucose_qc",
"s_creatinine_qc",
"insulin_qc",
"hdl_qc",
"ldl_qc",
"cholesterol_1_qc",
"triglycerides_qc",
"ur_creatinine_qc",
"ur_albumin_qc",
"ur_protein_qc")
hiv_cols <- c("tested_hiv_qc",
"hiv_status_qc",
"hiv_positive_qc",
"hiv_medication_qc",
"traditional_med_hiv_qc",
"agree_hivtest",
"result_hiv_qc")
# create age groups
agincourt$age_group <- cut(agincourt$age,
breaks=c(40, 61, 71, max(agincourt$age)),
right = FALSE,
labels = c("40-60","61-70","71 plus"))
# categorizing soweto data
soweto_sweet <- soweto[ which(soweto$cohort_id_c == "SWEET"),]
soweto_bara <- soweto[ which(soweto$cohort_id_c == "BARA"),]
soweto_men<- soweto[ which(soweto$cohort_id_c == ""),]
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
hiv_cat_freq(nairobi, hiv_cols)
#categories for men in nairobi
nairobi_male<- nairobi[ which(nairobi$sex == 1),]
nairobi_female<- nairobi[ which(nairobi$sex == 0),]
hiv_cat_freq(nairobi_male, hiv_cols)
hiv_cat_freq(nairobi_female, hiv_cols)
# comparing two categorical columns
table(nairobi$agree_hivtest_qc, nairobi$result_hiv_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$result_hiv_qc)
# comparing two categorical columns
table(nairobi$hiv_final_status_qc)
# comparing two categorical columns
table(nairobi$hiv_final_status_c)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$agree_hivtest_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$agree_hivtest_qc)
hiv_cat_freq(nairobi, hiv_cols)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$hiv_status_qc)
# comparing two categorical columns
table(nairobi$hiv_status_qc, nairobi$hiv_positive_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$hiv_medication_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$traditional_med_qc)
# comparing two categorical columns
table(nairobi$hiv_positive_qc, nairobi$agree_hivtest_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$agree_hivtest_qc)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$hiv_final_status_c)
# comparing two categorical columns
table(nairobi$tested_hiv_qc, nairobi$hiv_positive_qc)
# comparing two categorical columns
table(nairobi$hiv_status_qc, nairobi$hiv_positive_qc)
# comparing two categorical columns
table(nairobi$hiv_final_status_c)
table(nairobi$tested_hiv_qc, nairobi$result_hiv_qc)
table(nairobi$hiv_positive_qc, nairobi$result_hiv_qc)
table(nairobi$hiv_positive_qc, nairobi$agree_hivtest_qc)
table(nairobi$hiv_status_qc, nairobi$agree_hivtest_qc)
hiv_cat_freq(nairobi, hiv_cols)
runApp('~/Development/AWIGEN-1-Post-QC/shinyApp')
runApp('~/Development/AWIGEN-1-Post-QC/shinyApp')
