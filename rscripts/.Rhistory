axis.title.x = element_text(color="black", size=18),
axis.title.y = element_text(color="black", size=18),
axis.text = element_text(color="black", size=16),
legend.text = element_text(color="black", size=18),
legend.title = element_text(color="black", size=18),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# Learners for SL
#removing outliers
summary(SLdataset_2018$teacher_salary_Volunteer)
mu_mean <- ddply(SLdataset_2018, "outcome", summarise, sl_std.mean=mean(teacher_salary_Volunteer ))
head(mu_mean)
mu_median <- ddply(SLdataset_2018, "outcome", summarise, sl_std.median=median(teacher_salary_Volunteer ))
head(mu_median)
outliers <- boxplot(SLdataset_2018$teacher_salary_Volunteer, plot=FALSE)$out
SLdataset_2018_out <- SLdataset_2018[-which(SLdataset_2018$teacher_salary_Volunteer %in% outliers),]
ggplot(SLdataset_2018_out, aes(x=teacher_salary_Volunteer, color=outcome, fill=outcome)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5, bins = 30)+
geom_density(alpha=0.6)+
geom_vline(data=mu_mean, aes(xintercept=sl_std.mean, color=outcome),
linetype="dashed")+
geom_vline(data=mu_median, aes(xintercept=sl_std.median, color=outcome),
linetype="solid")+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
labs(title="SL teachers with BEduc degree histogram", x="Number of teachers", y = "Density")+
theme_prefered
# categories
canteen <- table(SLdataset_2018$canteen, SLdataset_2018$outcome)
canteen
gkgamma(canteen)
#list of libraries
library(readr)
library(GoodmanKruskal)
#import data
SLdataset_2018 <- read_csv("~/Documents/Development/dsfsi-thuto-slim/data/wassce/SLdataset_2018.csv")
library(ggplot2)
library(plyr)
library(MESS)
#import SL data
#for my pc
SLdataset_2018 <- read.csv("~/Development/dsfsi-thuto-slim/data/wassce/SLdataset_2018.csv", header=TRUE)
# creating classes
SLdataset_2018$outcome <- ifelse(SLdataset_2018$Papers_Passed < 50,
c("fail"), c("pass"))
theme_prefered = theme(
plot.title = element_text(color="black", size=18),
axis.title.x = element_text(color="black", size=18),
axis.title.y = element_text(color="black", size=18),
axis.text = element_text(color="black", size=16),
legend.text = element_text(color="black", size=18),
legend.title = element_text(color="black", size=18),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# list of categorical variables
cols <- c("remoteness","school_owner","financial_support","mixed_school","boarding","dev_plan","drink_water",
"latrine_condition","drink_water_source","library","canteen","elec_grid","idregion","approval_status",
"shift_status","fence","garden","internet","avail_latrine_fac","private_cubicle","sci_lab",
"rec_facilities","generator","basic_comp_skills")
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
}
}
#create dataframes based on quatiles
quantile(SLdataset_2018$Papers_Passed, 0.25)
#create dataframes based on quatiles
quantile(SLdataset_2018$Papers_Passed, 0.5)
#create dataframes based on quatiles
quantile(SLdataset_2018$Papers_Passed, 0.75)
#create dataframes based on quatiles
top <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed >= quantile(SLdataset_2018$Papers_Passed, 0.75)),]
low <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed <= quantile(SLdataset_2018$Papers_Passed, 0.25)),]
second <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed > quantile(SLdataset_2018$Papers_Passed, 0.25) &
SLdataset_2018$Papers_Passed <= quantile(SLdataset_2018$Papers_Passed, 0.5)),]
third <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed > quantile(SLdataset_2018$Papers_Passed, 0.5)
& quantile(SLdataset_2018$Papers_Passed, 0.75)),]
#create dataframes based on quatiles
top <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed > quantile(SLdataset_2018$Papers_Passed, 0.75)),]
low <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed <= quantile(SLdataset_2018$Papers_Passed, 0.25)),]
second <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed > quantile(SLdataset_2018$Papers_Passed, 0.25) &
SLdataset_2018$Papers_Passed <= quantile(SLdataset_2018$Papers_Passed, 0.5)),]
third <- SLdataset_2018[ which(SLdataset_2018$Papers_Passed > quantile(SLdataset_2018$Papers_Passed, 0.5)
& SLdataset_2018$Papers_Passed <= quantile(SLdataset_2018$Papers_Passed, 0.75)),]
#get a list of categorical columns to consider in the analysis
colnames(SLdataset_2018)
# list of categorical variables
cols <- c("remoteness","school_owner","financial_support","mixed_school","boarding","dev_plan","drink_water",
"latrine_condition","drink_water_source","library","canteen","elec_grid","idregion","approval_status",
"shift_status","fence","garden","internet","avail_latrine_fac","private_cubicle","sci_lab",
"rec_facilities","generator","basic_comp_skills")
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
}
}
get_category_dist(top, cols, 'outcome')
get_category_dist(third, cols, 'outcome')
get_category_dist(second, cols, 'outcome')
get_category_dist(low, cols, 'outcome')
get_category_dist(low, cols, 'outcome')
quantile(SLdataset_2018$Papers_Passed, 0.25))
quantile(SLdataset_2018$Papers_Passed, 0.25)
quantile(SLdataset_2018$Papers_Passed, 0.5)
quantile(SLdataset_2018$Papers_Passed, 0.75)
#top schools
#get the quatiles of papers passed variable
summary(SLdataset_2018$Papers_Passed)
get_category_dist(SLdataset_2018, cols, 'outcome')
print(gkgamma(tt))
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
get_category_dist(SLdataset_2018, cols, 'outcome')
# list of categorical variables
cols <- c("remoteness","school_owner","financial_support","mixed_school","boarding","dev_plan","drink_water",
"latrine_condition","drink_water_source","library","canteen","elec_grid","idregion","approval_status",
"shift_status","fence","garden","internet","avail_latrine_fac","private_cubicle","sci_lab",
"rec_facilities","generator","basic_comp_skills","feeder_school")
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
#get a list of categorical columns to consider in the analysis
colnames(SLdataset_2018)
# testing for significance of numeric variables
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
# testing for significance of numeric variables
nums <- c("disability","sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
get_numeric_significance(SLdataset_2018, nums, 'outcome')
#import SL data
#for my pc
SLdataset_2018 <- read.csv("~/Development/dsfsi-thuto-slim/data/wassce/SLdataset_2018.csv", header=TRUE)
# creating classes
SLdataset_2018$outcome <- ifelse(SLdataset_2018$Papers_Passed < 50,
c("fail"), c("pass"))
# testing for significance of numeric variables
nums <- c("disability","sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
# testing for significance of numeric variables
nums <- c("sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
View(SLdataset_2018)
# testing for significance of numeric variables
nums <- c("sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
fit <- aov(cl ~ sch_outcome, data=df)
print(fit)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
kruskal.test(sum_latrine ~ outcome, data = SLdataset_2018)
kruskal.test(sum_latrine ~ outcome, data = SLdataset_2018)
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
fit <- aov(cl ~ sch_outcome, data=df)
print(fit)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
aov(cl ~ sch_outcome, data=df)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
aov(cl ~ sch_outcome, data=df)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
kruskal.test(disability ~ outcome, data = SLdataset_2018)
kruskal.test(disability ~ outcome, data = SLdataset_2018)
kruskal.test(chalk_board_good ~ outcome, data = SLdataset_2018)
kruskal.test(full_time_teachers ~ outcome, data = SLdataset_2018)
kruskal.test(teacher_BEduc ~ outcome, data = SLdataset_2018)
kruskal.test(teacher_PostGradEduc ~ outcome, data = SLdataset_2018)
kruskal.test(learning_materials ~ outcome, data = SLdataset_2018)
kruskal.test(computers ~ outcome, data = SLdataset_2018)
kruskal.test(computers ~ outcome, data = SLdataset_2018)
kruskal.test(sum_enrol ~ outcome, data = SLdataset_2018)
kruskal.test(counsellors~ outcome, data = SLdataset_2018)
kruskal.test(counsellors~ outcome, data = SLdataset_2018)
kruskal.test(teachers~ outcome, data = SLdataset_2018)
kruskal.test(teacher_AnyBachelor~ outcome, data = SLdataset_2018)
kruskal.test(teacher_HTC_S~ outcome, data = SLdataset_2018)
kruskal.test(avg_teacher_service_years~ outcome, data = SLdataset_2018)
kruskal.test(student_teacher_ratio~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Government~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Government~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Private institution~ outcome, data = SLdataset_2018)
kruskal.test('teacher_salary_Private institution'~ outcome, data = SLdataset_2018)
# list of categorical variables
cols <- c("remoteness","school_owner","financial_support","mixed_school","boarding","dev_plan","drink_water",
"latrine_condition","drink_water_source","library","canteen","elec_grid","idregion","approval_status",
"shift_status","fence","garden","internet","avail_latrine_fac","private_cubicle","sci_lab",
"rec_facilities","generator","basic_comp_skills","feeder_school")
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
setwd("~/Development/AWIGEN-1-Post-QC/rscripts")
#import data
awigen <- read.csv("~/Documents/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
demographics_cat <- c(
"site",
"region_qc",
"sex",
"country",
"home_language",
"ethnicity",
"father_ethnicity",
"father_language",
"pat_gfather_ethnicity",
"pat_gfather_language",
"pat_gmother_language",
"pat_gmother_ethnicity",
"mother_ethnicity",
"mother_language",
"mat_gfather_ethnicity",
"mat_gfather_language",
"mat_gmother_ethnicity",
"mat_gmother_language",
"siblings",
"children",
"pregnant_qc",
"regular_periods",
"last_period_qc",
"months_since_last_period_c_qc",
"menopause_status_c_qc",
"menopause_manual",
"marital_status_qc",
"partnership_status_c_qc",
"highest_level_of_education_qc",
"occupation_qc",
"employment_status_c_qc",
"electricity",
"solar_energy",
"power_generator",
"alternative_power_source",
"television",
"radio",
"motor_vehicle",
"motorcycle",
"bicycle",
"refrigerator",
"washing_machine",
"sewing_machine",
"telephone",
"mobile_phone",
"microwave",
"dvd_player",
"satellite_tv_or_dstv",
"computer_or_laptop",
"internet_by_computer",
"internet_by_mobile_phone",
"electric_iron",
"fan",
"electric_or_gas_stove",
"kerosene_stove",
"plate_gas",
"electric_plate",
"torch",
"gas_lamp",
"kerosene_lamp_with_glass",
"toilet_facilities",
"portable_water",
"grinding_mill",
"tableh",
"sofa_set",
"wall_clock",
"bed",
"mattress",
"blankets",
"cattle",
"other_livestock",
"poultry",
"tractor",
"plough",
"ses_site_quintile_c_qc",
"ses_quintile_qc")
demographics_num <- c("age",
'number_of_brothers',
'number_of_sisters',
'number_of_sons',
'number_of_daughters',
"number_of_pregnancies_qc",
"number_of_live_births_qc",
"months_last_period_c",
"years_highest_education_qc",
"household_size_qc",
"number_of_rooms_qc",
"number_of_bedrooms_qc",
"num_in_house_c_qc",
"people_to_rooms_density_c_qc",
"people_to_bedrooms_density_c_qc",
"household_density_c","ses_c_qc",
)
# get the crosstabs for demographics
function(df, column_list){
for (cl in column_list) {
print(cl)
print(table(df[, cl]))
}
}
demo_cat_freq(awigen, demographics_cat)
# get the crosstabs for demographics
demo_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
print(table(df[, cl]))
}
}
demo_cat_freq(awigen, demographics_cat)
# get the crosstabs for demographics
demo_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
demo_cat_freq(awigen, demographics_cat)
# get the crosstabs for demographics
demo_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
for (c in colnames(df_table)){
print(c)
}
#print(df_table)
}
}
demo_cat_freq(awigen, demographics_cat)
# get the crosstabs for demographics
demo_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
demo_cat_freq(awigen, demographics_cat)
# get the crosstabs for demographics
demo_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
demo_cat_freq(awigen, demographics_cat)
View(awigen)
summary(awigen$country)
summary(awigen$country_qc)
demographics_num <- c("age",
'number_of_brothers',
'number_of_sisters',
'number_of_sons',
'number_of_daughters',
"number_of_pregnancies_qc",
"number_of_live_births_qc",
"months_last_period_c",
"years_highest_education_qc",
"household_size_qc",
"number_of_rooms_qc",
"number_of_bedrooms_qc",
"num_in_house_c_qc",
"people_to_rooms_density_c_qc",
"people_to_bedrooms_density_c_qc",
"household_density_c","ses_c_qc",
)
hist(awigen$country_qc)
hist(table(awigen$country_qc))
barplot(table(awigen$country_qc))
barplot(awigen,
main = "Survival of Each Class",
xlab = "country_qc"
)
barplot(awigen,
main = "Survival of Each Class",
xlab = "country_qc",
col = c("red","green")
)
barplot(table(awigen$country_qc),
main = "Survival of Each Class",
xlab = "country_qc",
col = c("red","green")
)
barplot(table(awigen$country_qc),
main = "Survival of Each Class",
xlab = "country_qc"
)
barplot(table(awigen$country_qc),
main = "Survival of Each Class",
xlab = "country_qc",
col = c("red","green", "yello", "green")
)
barplot(table(awigen$country_qc),
main = "Survival of Each Class",
xlab = "country_qc",
col = c("red","green", "yellow", "green")
)
barplot(table(awigen$country_qc),
main = "Survival of Each Class",
xlab = "country_qc",
col = c("red","green", "yellow", "purple")
)
legend("topleft",
c("Not survived","Survived"),
fill = c("red","green")
)
data <- data.frame(
name = c("DD","with himself","with DC","with Silur" ,"DC","with himself","with DD","with Silur" ,"Silur","with himself","with DD","with DC" ),
average = sample(seq(1,10) , 12 , replace=T),
number = sample(seq(4,39) , 12 , replace=T)
)
View(data)
# Increase bottom margin
par(mar=c(6,4,4,4))
#library
library(ggplot2)
g <- ggplot(awigen$country_qc)
barplot(table(awigen$country_qc),
main = "Survival of Each Class",
xlab = "country_qc",
col = c("red","green", "yellow", "purple")
)
barplot(table(awigen$country_qc))
ggplot(awigen, aes(x = country_qc, y = table(awigen$country_qc), fill = sex)) +
geom_col(position = "dodge")
View(awigen)
ggplot(awigen, aes(x = country_qc, y = age, fill = sex)) +
geom_col(position = "dodge")
ggplot(awigen, aes(x = country_qc, y = age, color = sex)) +
geom_col(position = "dodge")
ggplot(awigen, aes(x = country_qc, y = age, fill = sex)) +
geom_col(position = "dodge")
ggplot(awigen, aes(x = country_qc, y = age, fill = sex)) + geom_col(position = "dodge")
ggplot(awigen, aes(x = country_qc, y = sex, fill = sex)) + geom_col(position = "dodge")
barplot(table(awigen$country_qc))
